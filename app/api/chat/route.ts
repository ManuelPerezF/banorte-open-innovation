import { GoogleGenAI } from "@google/genai";
import { NextRequest, NextResponse } from 'next/server';
import { 
  getCompanyKPIs, 
  getCompanyMonthlyData, 
  getCompanyDecisions,
  getPersonalFinancialSummary 
} from '@/services/chatContext';
import { 
  getEnhancedFinancialContext,
  getSmartRecommendations
} from '@/lib/mcp-client';

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyA7y71LIvxNYEftupYOKY2J3unFMIdQBfc';

export async function POST(request: NextRequest) {
  try {
    const { message, userType, userId } = await request.json();

    if (!message) {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      );
    }

    // Inicializar Google GenAI
    const ai = new GoogleGenAI({
      apiKey: GEMINI_API_KEY
    });

    // Obtener contexto financiero seg√∫n el tipo de usuario
    let financialContext = '';
    let mcpRecommendations: string[] = [];
    
    try {
      // Intentar obtener contexto mejorado v√≠a MCP
      const enhancedContext = await getEnhancedFinancialContext(userType, userId);
      const smartRecommendations = await getSmartRecommendations(userType, userId, message);
      
      financialContext = enhancedContext;
      mcpRecommendations = smartRecommendations;
      
      console.log('‚úÖ Contexto MCP obtenido exitosamente');
    } catch (mcpError) {
      console.warn('‚ö†Ô∏è Error con MCP, usando contexto tradicional:', mcpError);
      
      // Fallback al sistema tradicional si MCP falla
      if (userType === 'company') {
        // Obtener datos de la empresa
        const [kpis, monthlyData, decisions] = await Promise.all([
          getCompanyKPIs(userId),
          getCompanyMonthlyData(userId),
          getCompanyDecisions(userId)
        ]);

        if (kpis.length > 0 || monthlyData.length > 0) {
          financialContext = `
DATOS FINANCIEROS ACTUALES DE LA EMPRESA (ID: ${userId}):

üìä KPIs RECIENTES:
${kpis.map(kpi => `
- Mes: ${kpi.month}
  üí∞ Ingresos: $${kpi.ingresos?.toLocaleString() || 'N/A'}
  üí∏ Gastos: $${kpi.gastos?.toLocaleString() || 'N/A'}
  üìà Margen Neto: ${kpi.margen_neto_pct?.toFixed(2) || 'N/A'}%
  üìä Crecimiento MoM: ${kpi.ingresos_mom_pct?.toFixed(2) || 'N/A'}%
  üèóÔ∏è % Infraestructura: ${kpi.pct_infra?.toFixed(1) || 'N/A'}%
  üë• % Personal: ${kpi.pct_personal?.toFixed(1) || 'N/A'}%
  üì¢ % Marketing: ${kpi.pct_marketing?.toFixed(1) || 'N/A'}%`).join('\n')}

üìÖ DISTRIBUCI√ìN DE GASTOS POR CATEGOR√çA (√öLTIMOS MESES):
${monthlyData.map(month => `
- ${month.month}:
  üèóÔ∏è Infraestructura: $${month.g_infra?.toLocaleString() || '0'}
  üë• Personal: $${month.g_personal?.toLocaleString() || '0'}
  üì¢ Marketing: $${month.g_marketing?.toLocaleString() || '0'}
  üõ†Ô∏è Servicios: $${month.g_servicios?.toLocaleString() || '0'}
  üíº Costos: $${month.g_costos?.toLocaleString() || '0'}`).join('\n')}

üéØ RECOMENDACIONES AUTOM√ÅTICAS:
${decisions.recommendations?.map(rec => `
- KPI: ${rec.kpi} | Mes: ${rec.month} | Valor: ${rec.value}
  üí° Recomendaci√≥n: ${rec.decision}`).join('\n') || 'No hay recomendaciones disponibles'}
`;
        }
      } else {
        // Obtener datos personales
        const personalSummary = await getPersonalFinancialSummary(parseInt(userId));
        
        if (personalSummary) {
          const topCategorias = Object.entries(personalSummary.gastosPorCategoria)
            .sort(([,a], [,b]) => (b as number) - (a as number))
            .slice(0, 5);

          financialContext = `
DATOS FINANCIEROS PERSONALES ACTUALES (Usuario: ${userId}):

üí∞ RESUMEN FINANCIERO:
- Total Ingresos: $${personalSummary.totalIngresos.toLocaleString()}
- Total Gastos: $${personalSummary.totalGastos.toLocaleString()}
- Balance Actual: $${personalSummary.balance.toLocaleString()}
- Estado: ${personalSummary.balance >= 0 ? '‚úÖ Positivo' : '‚ùå Negativo'}

üìä TOP CATEGOR√çAS DE GASTOS:
${topCategorias.map(([categoria, monto]) => `
- ${categoria}: $${(monto as number).toLocaleString()}`).join('\n')}

üìã √öLTIMAS TRANSACCIONES:
${personalSummary.transacciones.slice(0, 5).map(tx => `
- ${tx.fecha}: ${tx.tipo === 'ingreso' ? 'üí∞' : 'üí∏'} $${tx.monto.toLocaleString()} - ${tx.descripcion || tx.categoria || 'Sin descripci√≥n'}`).join('\n')}
`;
        }
      }
    }

    // Agregar recomendaciones MCP al contexto si est√°n disponibles
    const mcpSection = mcpRecommendations.length > 0 ? `

ü§ñ RECOMENDACIONES INTELIGENTES MCP:
${mcpRecommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}
` : '';

    // Crear el contexto del prompt basado en el tipo de usuario
    const systemContext = `Eres un asistente financiero especializado de Banorte, potenciado por tecnolog√≠a MCP (Model Context Protocol), enfocado en ayudar a ${userType === 'personal' ? 'usuarios individuales' : 'empresas'} con sus finanzas.

Contexto del usuario:
- Tipo de usuario: ${userType === 'personal' ? 'Personal' : 'Empresarial'}
- ID de usuario: ${userId}
- Sistema: ${mcpRecommendations.length > 0 ? 'ü§ñ MCP Activo' : 'üìä Modo Tradicional'}

${financialContext}${mcpSection}

INSTRUCCIONES IMPORTANTES:
1. Usa SIEMPRE los datos financieros reales proporcionados arriba para responder preguntas espec√≠ficas sobre n√∫meros, gastos, ingresos, etc.
2. Si el usuario pregunta sobre tendencias, usa los datos hist√≥ricos mostrados
3. Si pregunta sobre recomendaciones, prioriza las recomendaciones MCP cuando est√©n disponibles
4. Para preguntas generales de consejos financieros, combina tu conocimiento general con insights de los datos reales
5. Siempre referencia n√∫meros espec√≠ficos cuando sea relevante
6. Si los datos muestran problemas (como gastos altos en ciertas categor√≠as), menci√≥nalos proactivamente
7. ${mcpRecommendations.length > 0 ? 'PRIORIZA las recomendaciones MCP ya que son an√°lisis avanzados basados en IA' : 'Usa los datos disponibles para dar consejos personalizados'}

Tu rol es:
1. Proporcionar consejos financieros personalizados basados en datos reales
2. Analizar tendencias y patrones en los datos hist√≥ricos
3. Sugerir estrategias espec√≠ficas basadas en la situaci√≥n actual
4. Explicar productos financieros de Banorte cuando sea relevante
5. Ser emp√°tico y comprensivo con las preocupaciones financieras
6. ${mcpRecommendations.length > 0 ? 'Actuar como un asesor financiero potenciado por IA avanzada' : 'Usar an√°lisis tradicional de datos financieros'}

Responde de manera:
- Clara y concisa
- Profesional pero amigable  
- Enfocada en soluciones pr√°cticas basadas en datos reales
- Con ejemplos espec√≠ficos usando los n√∫meros reales del usuario
- En espa√±ol mexicano
- ${mcpRecommendations.length > 0 ? 'Mencionando que usas an√°lisis avanzado MCP cuando sea relevante' : 'Bas√°ndote en an√°lisis de datos tradicional'}

Pregunta del usuario: ${message}`;

    // Generar contenido con Gemini
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: systemContext,
    });

    const generatedText = response.text || 'Lo siento, no pude generar una respuesta.';

    return NextResponse.json({ response: generatedText });

  } catch (error) {
    console.error('Error en la API de chat:', error);
    
    // Determinar el tipo de error y responder apropiadamente
    if (error instanceof Error) {
      if (error.message.includes('401') || error.message.includes('API_KEY')) {
        return NextResponse.json(
          { error: 'Clave de API inv√°lida' },
          { status: 401 }
        );
      } else if (error.message.includes('429') || error.message.includes('QUOTA')) {
        return NextResponse.json(
          { error: 'Cuota de API excedida' },
          { status: 429 }
        );
      } else if (error.message.includes('403')) {
        return NextResponse.json(
          { error: 'Acceso denegado. Verifica tu API key.' },
          { status: 403 }
        );
      }
    }
    
    return NextResponse.json(
      { error: 'Error interno del servidor. Por favor, int√©ntalo de nuevo.' },
      { status: 500 }
    );
  }
}