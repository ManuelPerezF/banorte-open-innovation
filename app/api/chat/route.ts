import { GoogleGenAI } from "@google/genai";
import { NextRequest, NextResponse } from 'next/server';
import { 
  getCompanyKPIs, 
  getCompanyMonthlyData, 
  getCompanyDecisions,
  getPersonalFinancialSummary,
  getPersonalFinancialSummaryFallback 
} from '@/services/chatContext';
import { 
  getEnhancedFinancialContext,
  getSmartRecommendations
} from '@/lib/mcp-client';

const GEMINI_API_KEY = process.env.GEMINI_API_KEY || 'AIzaSyBo9Bgg0OnzOePhrTzkJHuiJCXcVDapNRU';

export async function POST(request: NextRequest) {
  try {
    const { message, userType, userId } = await request.json();

    if (!message) {
      return NextResponse.json(
        { error: 'Mensaje requerido' },
        { status: 400 }
      );
    }

    // Inicializar Google GenAI
    const ai = new GoogleGenAI({
      apiKey: GEMINI_API_KEY
    });

    // Obtener contexto financiero seg√∫n el tipo de usuario
    let financialContext = '';
    let mcpRecommendations: string[] = [];
    
    try {
      // Intentar obtener contexto mejorado v√≠a MCP
      const enhancedContext = await getEnhancedFinancialContext(userType, userId);
      const smartRecommendations = await getSmartRecommendations(userType, userId, message);
      
      financialContext = enhancedContext;
      mcpRecommendations = smartRecommendations;
      
      console.log('‚úÖ Contexto MCP obtenido exitosamente');
    } catch (mcpError) {
      console.warn('‚ö†Ô∏è Error con MCP, usando contexto tradicional:', mcpError);
    }
    
    // SIEMPRE intentar fallback tradicional si no hay datos suficientes
    if (!financialContext || !financialContext.includes('$') || financialContext.includes('ERROR')) {
      console.log('üîÑ Usando fallback tradicional para obtener datos');
      
      if (userType === 'company') {
        // Obtener datos de la empresa
        const [kpis, monthlyData, decisions] = await Promise.all([
          getCompanyKPIs(userId),
          getCompanyMonthlyData(userId),
          getCompanyDecisions(userId)
        ]);

        console.log(`üìä KPIs obtenidos: ${kpis.length} registros`);
        console.log(`üìÖ Datos mensuales: ${monthlyData.length} registros`);

        if (kpis.length > 0 || monthlyData.length > 0) {
          financialContext = `
DATOS EMPRESA ${userId}:

üìä KPIs RECIENTES:
${kpis.map(kpi => `
- Mes: ${kpi.month}
  üí∞ Ingresos: $${kpi.ingresos?.toLocaleString() || 'N/A'}
  üí∏ Gastos: $${kpi.gastos?.toLocaleString() || 'N/A'}
  üìà Margen: ${kpi.margen_neto_pct?.toFixed(2) || 'N/A'}%
  üìä Crecimiento: ${kpi.ingresos_mom_pct?.toFixed(2) || 'N/A'}%
  üèóÔ∏è % Infraestructura: ${kpi.pct_infra?.toFixed(1) || 'N/A'}%
  üë• % Personal: ${kpi.pct_personal?.toFixed(1) || 'N/A'}%
  üì¢ % Marketing: ${kpi.pct_marketing?.toFixed(1) || 'N/A'}%`).join('\n')}

üìÖ GASTOS POR CATEGOR√çA:
${monthlyData.map(month => `
- ${month.month}:
  üèóÔ∏è Infraestructura: $${month.g_infra?.toLocaleString() || '0'}
  üë• Personal: $${month.g_personal?.toLocaleString() || '0'}
  üì¢ Marketing: $${month.g_marketing?.toLocaleString() || '0'}
  üõ†Ô∏è Servicios: $${month.g_servicios?.toLocaleString() || '0'}
  üíº Costos: $${month.g_costos?.toLocaleString() || '0'}`).join('\n')}
`;
        }
      } else {
        // Obtener datos personales - USAR LA FUNCI√ìN CORREGIDA CON TODAS LAS TRANSACCIONES
        const personalSummary = await getPersonalFinancialSummaryFallback(parseInt(userId));
        
        if (personalSummary) {
          const topCategorias = Object.entries(personalSummary.gastosPorCategoria)
            .sort(([,a], [,b]) => (b as number) - (a as number))
            .slice(0, 5);

          financialContext = `
DATOS PERSONALES ${userId}:

üí∞ RESUMEN:
- Ingresos totales: $${personalSummary.totalIngresos.toLocaleString()}
- Gastos totales: $${personalSummary.totalGastos.toLocaleString()}
- Balance: $${personalSummary.balance.toLocaleString()}

üìä TOP GASTOS:
${topCategorias.map(([categoria, monto]) => `
- ${categoria}: $${(monto as number).toLocaleString()}`).join('\n')}

üìã √öLTIMAS TRANSACCIONES:
${personalSummary.transacciones.slice(0, 5).map(tx => `
- ${tx.fecha}: ${tx.tipo === 'ingreso' ? 'üí∞' : 'üí∏'} $${tx.monto.toLocaleString()} - ${tx.descripcion || tx.categoria || 'Sin descripci√≥n'}`).join('\n')}
`;
        }
      }
    }

    // Agregar recomendaciones MCP al contexto si est√°n disponibles
    const mcpSection = mcpRecommendations.length > 0 ? `

ü§ñ DATOS MCP:
${mcpRecommendations.map((rec, index) => `${index + 1}. ${rec}`).join('\n')}
` : '';

    // Verificar que tenemos datos reales
    let hasRealData = false;
    if (userType === 'company') {
      hasRealData = financialContext.includes('$') && (financialContext.includes('Ingresos:') || financialContext.includes('KPIs'));
    } else {
      hasRealData = financialContext.includes('$') && financialContext.includes('Balance');
    }

    console.log(`üìã Validaci√≥n de datos - Usuario: ${userId}, Tipo: ${userType}, Tiene datos: ${hasRealData}`);
    console.log(`üìù Contexto financiero: ${financialContext.substring(0, 200)}...`);

    if (!hasRealData) {
      console.log('‚ùå No se encontraron datos financieros');
      return NextResponse.json({ 
        response: userType === 'company' 
          ? `No encuentro datos financieros para la empresa ID: ${userId}. Verifica que tengas KPIs registrados en la vista v_company_kpis.`
          : "No encuentro tus datos financieros. Agrega algunas transacciones en la secci√≥n de Datos para que pueda ayudarte."
      });
    }

    // Crear el contexto del prompt basado en el tipo de usuario
    const systemContext = `Eres un asistente financiero especializado de Banorte. Tu trabajo es dar respuestas INFORMATIVAS y ESPEC√çFICAS basadas en los datos reales del usuario.

DATOS DEL USUARIO:
- Tipo: ${userType === 'personal' ? 'Personal' : 'Empresarial'}
- ID: ${userId}
- Sistema: ${mcpRecommendations.length > 0 ? 'ü§ñ MCP Activo' : 'üìä Tradicional'}

${financialContext}${mcpSection}

REGLAS PARA RESPUESTAS:
1. SIEMPRE usar n√∫meros reales de los datos mostrados arriba
2. Respuestas de 3-6 l√≠neas (ni muy cortas ni muy largas)
3. Incluir el dato principal + contexto relevante + una recomendaci√≥n breve
4. Para KPIs: mostrar n√∫mero + comparaci√≥n + estado actual
5. Para gastos: mostrar categor√≠as principales + porcentajes + observaci√≥n

FORMATO DE RESPUESTAS:
- Datos espec√≠ficos: "Tu [m√©trica] es $X. [Contexto]. [Recomendaci√≥n breve]"
- Tendencias: "[M√©trica]: $X (vs anterior: +Y%). [Interpretaci√≥n]. [Siguiente paso]"  
- Gastos: "Principales gastos: [3 categor√≠as con montos]. [An√°lisis]. [Sugerencia]"
- Estado general: "[Estado] - [Raz√≥n] + [Dato de apoyo] + [Consejo]"

${userType === 'company' ? `
RESPUESTAS TIPO EMPRESA:
- KPIs: N√∫mero + contexto de crecimiento + estado del margen + recomendaci√≥n
- Gastos: Top 3 categor√≠as con % + comparaci√≥n con est√°ndares + sugerencia de optimizaci√≥n
- Tendencias: Crecimiento actual + an√°lisis del per√≠odo + pron√≥stico simple
- Estado: Evaluaci√≥n general + m√©tricas clave + acci√≥n recomendada
` : `
RESPUESTAS TIPO PERSONAL:
- Balance: Monto + evaluaci√≥n + categor√≠a principal + consejo de ahorro
- Gastos: Top 3 categor√≠as + porcentaje del total + recomendaci√≥n
- Situaci√≥n: Estado actual + comparaci√≥n temporal + pr√≥ximo paso
`}

Pregunta: "${message}"

RESPUESTA (3-6 l√≠neas informativas con datos espec√≠ficos):`;

    // Generar contenido con Gemini
    const response = await ai.models.generateContent({
      model: "gemini-2.5-flash",
      contents: systemContext,
    });

    const generatedText = response.text || 'Lo siento, no pude generar una respuesta.';

    return NextResponse.json({ response: generatedText });

  } catch (error) {
    console.error('Error en la API de chat:', error);
    
    // Determinar el tipo de error y responder apropiadamente
    if (error instanceof Error) {
      if (error.message.includes('401') || error.message.includes('API_KEY')) {
        return NextResponse.json(
          { error: 'Clave de API inv√°lida' },
          { status: 401 }
        );
      } else if (error.message.includes('429') || error.message.includes('QUOTA')) {
        return NextResponse.json(
          { error: 'Cuota de API excedida' },
          { status: 429 }
        );
      } else if (error.message.includes('403')) {
        return NextResponse.json(
          { error: 'Acceso denegado. Verifica tu API key.' },
          { status: 403 }
        );
      }
    }
    
    return NextResponse.json(
      { error: 'Error interno del servidor. Por favor, int√©ntalo de nuevo.' },
      { status: 500 }
    );
  }
}